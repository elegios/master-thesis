syntax top:File = body:Block {
  #scope (body)
  BExpression` #callcc (fun return.
    `t(body) return (fun _. #crash))
}

syntax var:Expression = id:Identifier {
  BExpression` `id(id)
}

syntax intLit:Expression = i:Integer {
  BExpression` `int(i)
}

syntax strLit:Expression = s:String {
  BExpression` `str(s)
}

// This has incorrect semantics when called with the wrong number of arguments
// Also breaks precedence transformation, f must be high precedence, e and es must be low precence :(
syntax funcCall:Expression =
  f:Expression "(" args:ArgList ")"
{
  #prec 15
  #scope (args)
  #scope (f)
  BExpression` `t(args) `t(f) #unit
}

// This is included to enable the Expressions to go to the top level Expression non-terminal, ideally it would be defined inline in funcCall, but then it would recurse into a lower precedence
syntax argList:ArgList =
  (e:Expression ("," es:Expression)*)?
{
  BExpression` efun f. `t(
    foldl es prev
      (BExpression` (#deref `t(prev)) `t(es))
    foldl e prev
      (BExpression` (#deref `t(prev)) `t(e))
    (BExpression` f))
}

syntax debugPrint:Expression = "#" "debug" {
  BExpression` fun x. fun _. #print x
}

syntax equal:Expression = a:Expression "==" b:Expression {
  #prec 8
  BExpression` #equal (#deref `t(a)) (#deref `t(b))
}

syntax plus:Expression = a:Expression "+" b:Expression {
  #prec 11
  #assoc left
  BExpression` #plus (#deref `t(a)) (#deref `t(b))
}

syntax minus:Expression = a:Expression "-" b:Expression {
  #prec 11
  #assoc left
  BExpression` #minus (#deref `t(a)) (#deref `t(b))
}

syntax times:Expression = a:Expression "*" b:Expression {
  #assoc left
  #prec 12
  BExpression` #multiply (#deref `t(a)) (#deref `t(b))
}

syntax divide:Expression = a:Expression "/" b:Expression {
  #assoc left
  #prec 12
  BExpression` #divide (#deref `t(a)) (#deref `t(b))
}

syntax parens:Expression = "(" e:Expression ")" {
  e
}

syntax funcCallStmnt:Statement =
  f:Expression "(" args:ArgList ")"
{
  #scope (f)
  #scope (args)
  BExpression` efun _. efun _. `t(args) `t(f) #unit
}

syntax assignment:Statement =
  ref:Expression "=" value:Expression
{
  BExpression` efun _. efun _.
    #assign `t(ref) (#deref `t(value))
}

syntax local:Statement =
  "local" x:Identifier ("=" e:Expression)?
{
  #bind x after
  #scope (e)
  BExpression` efun _. efun _.
    defAfter `id(x) = #ref
      (#deref `t(foldr e _ (e) (BExpression` #unit)))
}

syntax block:Statement = "do" b:Block "end" {
  b
}

syntax if:Statement =
  "if" cond:Expression
  "then" then:Block
  elseif:("elseif" econd:Expression "then" ethen:Block)*
  ("else" else:Block)? "end"
{
  #scope (cond (then))
  #scope elseif:(econd (ethen))
  #scope (else)

  BExpression` efun return. efun break. #if (#deref `t(cond))
    (fun _. `t(then) return break)
    (fun _. `t(
      foldr elseif next
        (BExpression` #if (#deref `t(econd))
          (fun _. `t(ethen) return break)
          (fun _. `t(next)))
      foldr else _
        (BExpression` `t(else) return break)
      (BExpression` #unit)))
}

syntax while:Statement =
  "while" cond:Expression "do"
  body:Block "end"
{
  #scope (cond (body))
  BExpression` efun return. efun _. #callcc (fun break.
    #fix (fun repeat. fun _.
      #if (#deref `t(cond))
        (fun _.
          (`t(body) return break;
           repeat #unit))
        (fun _. #unit)))
}

syntax repeat:Statement =
  "repeat" body:Block "until" cond:Expression
{
  #scope ((body) cond)
  BExpression` efun return. efun _. #callcc (fun break.
    #fix (fun repeat. fun _. (
      `t(body) return break;
      #if (#deref `t(cond))
        (fun _. repeat #unit)
        (fun _. #unit))))
}

syntax numFor:Statement =
  "for" i:Identifier "="
  s:Expression "," e:Expression
  ("," step:Expression)?
  "do" body:Block "end"
{
  #bind i in body
  #scope (s)
  #scope (e)
  #scope (step)
  #scope (body)
  BExpression` efun return. efun _.
    (defAfter step = #deref
      `t(foldr step _ (step) (BExpression` 1));
     defAfter end = #deref `t(e);
     #callcc (fun break. #fix (fun rep. fun x.
       (defAfter `id(i) = x;
        #if (#leq x end)  // TODO: doesn't handle a step that misses the last, nor end < start (which should be nop)
          (fun _. (`t(body) return break;
                   rep (#plus x step)))
          (fun _. #unit)))
       `t(s)))
}

syntax function:Statement =
  "function" f:Identifier
  "(" (a:Identifier ("," as:Identifier)*)? ")"
  body:Block "end"
{
  #bind f before
  #bind f after
  #bind f, a, as in body
  #scope (body)
  BExpression` efun _. efun _.
    (defAround `id(f) = #fix (fun recur.
      (defAfter `id(f) = recur;
       `t(foldr a next
            (BExpression` fun `id(a). `t(next))
          foldr as next
            (BExpression` fun `id(as). `t(next))
          (BExpression` fun _. #callcc (fun return.
            `t(body) return (fun _. #crash)))))))
}

syntax blockContent:Block =
  (stmnts:Statement ";"?)* ret:Return?
{
  #scope (stmnts ret)
  BExpression` efun return. efun break. `t(
    foldr stmnts next
      (BExpression` `t(stmnts) return break; `t(next))
    foldr ret _
      (BExpression` `t(ret) return break)
    (BExpression` #unit))
}

syntax return:Return = "return" e:Expression? {
  BExpression` efun return. efun break. `t(
    foldr e _
      (BExpression` return (#deref `t(e)))
    (BExpression` return #unit))
}

syntax break:Return = "break" {
  BExpression` efun return. efun break. break #unit
}

