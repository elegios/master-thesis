
syntax top:File = ts:Top+ {
  foldl1 ts prev (BExpression` `t(prev); `t(ts))
}

// ERROR: if args[1] has #bind before and args[0]
// uses it then args[0] will work before expansion,
// but not after. Same for letExpr
syntax topLet:Top =
  "let" x:Identifier args:Pattern*
  "=" e:Expression (";" ";")?
{
  #bind x after
  #scope (args (e))
  BExpression` defAfter `id(x) = `t(
    foldr args next
      (BExpression` fun x.
        (`t(args) (fun _. #crash) x;
         `t(next)))
    e)
}

syntax topLetRec:Top =
  "let" "rec" x:Identifier args:Pattern*
  "=" e:Expression
  more:("and" x2:Identifier args2:Pattern*
        "=" e2:Expression)* (";" ";")?
{
  #bind x, x2 after
  #bind x, x2 in e, e2
  #scope (args (e))
  #scope more:(args2 (e2))
  BExpression`
  defAround `id(x) = #fix (fun `id(x).
    `t(foldr args next
         (BExpression` fun x.
           (`t(args) (fun _. #crash) x;
            `t(next)))
       e));
  `t(foldl more prevdef
       (BExpression` `t(prevdef);
        defAround `id(x2) = #fix (fun `id(x2).
          `t(foldr args2 next
               (BExpression` fun x.
                 (`t(args2) (fun _. #crash) x;
                  `t(next)))
             e2)))
     (BExpression` #unit))
}

syntax debugPrint:Expression = "#" "debug" {
  BExpression` #print
}

syntax funApp:Expression =
  f:Expression arg:Expression
{
  #assoc left
  #prec 13
  BExpression` `t(f) `t(arg)
}

syntax letExpr:Expression =
  "let" x:Identifier args:Pattern*
  "=" e:Expression "in" body:Expression
{
  #prec 2
  #bind x in body
  #scope (body)
  #scope (args (e))
  BExpression` defAfter `id(x) = `t(
    foldr args next
      (BExpression` fun x.
        (`t(args) (fun _. #crash) x;
         `t(next)))
    e);
  `t(body)
}

syntax letRecExpr:Expression =
  "let" "rec" x:Identifier args:Pattern*
  "=" e:Expression "in" body:Expression
{
  #prec 2
  #bind x in e, body
  #scope (body)
  #scope (args (e))
  BExpression` defAfter `id(x) = #fix (fun `id(x).
    `t(foldr args next
         (BExpression` fun x.
           (`t(args) (fun _. #crash) x;
            `t(next)))
       e));
    `t(body)
}

syntax match:Expression =
  "match" e:Expression "with"
  arm:("|" p:Pattern "->" body:Expression)+
{
  #scope arm:(p body)
  #scope (e)
  #prec 2
  BExpression` #callcc (fun end. (fun val.
    `t(foldr arm prev
         (BExpression`
           #callcc (fun next.
             (`t(p) next val;
              end `t(body)));
           `t(prev))
       (BExpression` #crash)))
    `t(e))
}

syntax plus:Expression =
  a:Expression "+" b:Expression
{
  #prec 11
  #assoc left
  BExpression` #plus `t(a) `t(b)
}

syntax minus:Expression =
  a:Expression "-" b:Expression
{
  #prec 11
  #assoc left
  BExpression` #minus `t(a) `t(b)
}

syntax times:Expression =
  a:Expression "*" b:Expression
{
  #assoc left
  #prec 12
  BExpression` #multiply `t(a) `t(b)
}

syntax equal:Expression =
  a:Expression "=" b:Expression
{
  #assoc left
  #prec 10
  BExpression` #equal `t(a) `t(b)
}

syntax leq:Expression =
  a:Expression "<=" b:Expression
{
  #assoc left
  #prec 10
  BExpression` #leq `t(a) `t(b)
}

syntax parens:Expression = "(" e:Expression ")" {
  e
}

syntax cons:Expression =
  h:Expression "::" t:Expression
{
  #assoc right
  #prec 10
  BExpression` #cons `t(h) `t(t)
}

syntax seqComp:Expression =
  a:Expression ";" b:Expression
{
  #assoc right
  #prec 2
  BExpression` `t(a); `t(b)
}

syntax var:Expression = v:Identifier
{ BExpression``id(v) }
syntax unitLit:Expression = "(" ")"
{ BExpression` #unit }
syntax trueLit:Expression = "true"
{ BExpression` #true }
syntax falseLit:Expression = "false"
{ BExpression` #false }
syntax IntLit:Expression = n:Integer
{ BExpression``int(n) }
syntax FloatLit:Expression = f:Float
{ BExpression``float(f) }
syntax StringLit:Expression = s:String
{ BExpression``str(s) }
syntax listLit:Expression =
  "[" (e:Expression (";" es:Expression)*)? "]"
{
  foldr e next
    (BExpression` #cons `t(e) `t(next))
  foldr es next
    (BExpression` #cons `t(es) `t(next))
  (BExpression` #nil)
}
syntax funLit:Expression =
  "fun" args:Pattern+ "->"
  body:Expression
{
  #prec 1
  #scope (args (body))
  foldr args next
    (BExpression` fun x.
      (`t(args) (fun _. #crash) x;
       `t(next)))
  body
}

syntax intPat:Pattern = i:Integer {
  BExpression` efun fail. efun val.
    #if (#equal `int(i) val)
      (fun _. #unit)
      (fun _. fail #unit)
}
syntax floatPat:Pattern = f:Float {
  BExpression` efun fail. efun val.
    #if (#equal `float(f) val)
      (fun _. #unit)
      (fun _. fail #unit)
}
syntax stringPat:Pattern = s:String {
  BExpression` efun fail. efun val.
    #if (#equal `str(s) val)
      (fun _. #unit)
      (fun _. fail #unit)
}
syntax truePat:Pattern = "true" {
  BExpression` efun fail. efun val.
    #if (#equal #true val)
      (fun _. #unit)
      (fun _. fail #unit)
}
syntax falsePat:Pattern = "false" {
  BExpression` efun fail. efun val.
    #if (#equal #false val)
      (fun _. #unit)
      (fun _. fail #unit)
}
syntax bindPat:Pattern = id:Identifier {
  #bind id after
  BExpression` efun _. efun val.
    defAfter `id(id) = val
}
syntax wildcardPat:Pattern = "_" {
  BExpression` efun _. efun _. #unit
}
syntax listPat:Pattern =
  "[" (p:Pattern (";" ps:Pattern)*)? "]"
{
  BExpression` efun fail. efun val.
    `t(foldr p next
         (BExpression` efun prev.
           (#if (#equal prev #nil)
              (fun _. fail #unit)
              (fun _. #unit);
            `t(p) fail (#head prev);
            `t(next) (#tail prev)))
       foldr ps next
         (BExpression` efun prev.
           (#if (#equal prev #nil)
              (fun _. fail #unit)
              (fun _. #unit);
            `t(ps) fail (#head prev);
            `t(next) (#tail prev)))
       (BExpression` (efun prev.
         #if (#equal prev #nil)
           (fun _. #unit)
           (fun _. fail #unit))))
    val
}
syntax consPat:Pattern =
  h:Pattern "::" t:Pattern
{
  #assoc right
  #prec 10
  BExpression` efun fail. efun value.
    (#if (#equal value #nil)
       (fun _. fail #unit)
       (fun _. #unit);
     defAfter headValue = #head value;
     `t(h) fail headValue;
     defAfter tailValue = #tail value;
     `t(t) fail tailValue)
}
