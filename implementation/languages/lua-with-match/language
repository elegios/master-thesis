syntax top:File = body:Block {
  #scope (body)
  BExpression` #callcc (fun return.
    `t(body) return (fun __. #crash))
}

syntax var:Expression = id:Identifier {
  BExpression` `id(id)
}

syntax intLit:Expression = i:Integer {
  BExpression` `int(i)
}

syntax strLit:Expression = s:String {
  BExpression` `str(s)
}

// This has incorrect semantics when called with the wrong number of arguments
// Also breaks precedence transformation, f must be high precedence, e and es must be low precence :(
syntax funcCall:Expression =
  f:Expression "(" args:ArgList ")"
{
  #prec 15
  #scope (args)
  #scope (f)
  BExpression` `t(args) `t(f) #unit
}

// This is included to enable the Expressions to go to the top level Expression non-terminal, ideally it would be defined inline in funcCall, but then it would recurse into a lower precedence
syntax argList:ArgList =
  (e:Expression ("," es:Expression)*)?
{
  BExpression` efun f. `t(
    foldl es prev
      (BExpression` (#deref `t(prev)) `t(es))
    foldl e prev
      (BExpression` (#deref `t(prev)) `t(e))
    (BExpression` f))
}

syntax debugPrint:Expression = "#" "debug" {
  BExpression` fun x. fun __. #print x
}

syntax equal:Expression = a:Expression "==" b:Expression {
  #prec 8
  BExpression` #equal (#deref `t(a)) (#deref `t(b))
}

syntax plus:Expression = a:Expression "+" b:Expression {
  #prec 11
  #assoc left
  BExpression` #plus (#deref `t(a)) (#deref `t(b))
}

syntax minus:Expression = a:Expression "-" b:Expression {
  #prec 11
  #assoc left
  BExpression` #minus (#deref `t(a)) (#deref `t(b))
}

syntax times:Expression = a:Expression "*" b:Expression {
  #assoc left
  #prec 12
  BExpression` #multiply (#deref `t(a)) (#deref `t(b))
}

syntax divide:Expression = a:Expression "/" b:Expression {
  #assoc left
  #prec 12
  BExpression` #divide (#deref `t(a)) (#deref `t(b))
}

syntax parens:Expression = "(" e:Expression ")" {
  e
}

syntax funcCallStmnt:Statement =
  f:Expression "(" args:ArgList ")"
{
  #scope (f)
  #scope (args)
  BExpression` efun __. efun __. `t(args) `t(f) #unit
}

syntax assignment:Statement =
  ref:Expression "=" value:Expression
{
  BExpression` efun __. efun __.
    #assign `t(ref) (#deref `t(value))
}

syntax local:Statement =
  "local" x:Identifier ("=" e:Expression)?
{
  #bind x after
  #scope (e)
  BExpression` efun __. efun __.
    defAfter `id(x) = #ref
      (#deref `t(foldr e __ (e) (BExpression` #unit)))
}

syntax block:Statement = "do" b:Block "end" {
  b
}

syntax if:Statement =
  "if" cond:Expression
  "then" then:Block
  elseif:("elseif" econd:Expression "then" ethen:Block)*
  ("else" else:Block)? "end"
{
  #scope (cond (then))
  #scope elseif:(econd (ethen))
  #scope (else)

  BExpression` efun return. efun break. #if (#deref `t(cond))
    (fun __. `t(then) return break)
    (fun __. `t(
      foldr elseif next
        (BExpression` #if (#deref `t(econd))
          (fun __. `t(ethen) return break)
          (fun __. `t(next)))
      foldr else __
        (BExpression` `t(else) return break)
      (BExpression` #unit)))
}

syntax while:Statement =
  "while" cond:Expression "do"
  body:Block "end"
{
  #scope (cond (body))
  BExpression` efun return. efun __. #callcc (fun break.
    #fix (fun repeat. fun __.
      #if (#deref `t(cond))
        (fun __.
          (`t(body) return break;
           repeat #unit))
        (fun __. #unit)))
}

syntax repeat:Statement =
  "repeat" body:Block "until" cond:Expression
{
  #scope ((body) cond)
  BExpression` efun return. efun __. #callcc (fun break.
    #fix (fun repeat. fun __. (
      `t(body) return break;
      #if (#deref `t(cond))
        (fun __. repeat #unit)
        (fun __. #unit))))
}

syntax numFor:Statement =
  "for" i:Identifier "="
  s:Expression "," e:Expression
  ("," step:Expression)?
  "do" body:Block "end"
{
  #bind i in body
  #scope (s)
  #scope (e)
  #scope (step)
  #scope (body)
  BExpression` efun return. efun __.
    (defAfter step = #deref
      `t(foldr step __ (step) (BExpression` 1));
     defAfter end = #deref `t(e);
     #callcc (fun break. #fix (fun rep. fun x.
       (defAfter `id(i) = x;
        #if (#leq x end)
          (fun __. (`t(body) return break;
                   rep (#plus x step)))
          (fun __. #unit)))
       `t(s)))
}

syntax function:Statement =
  "function" f:Identifier
  "(" (a:Identifier ("," as:Identifier)*)? ")"
  body:Block "end"
{
  #bind f before
  #bind f after
  #bind f, a, as in body
  #scope (body)
  BExpression` efun __. efun __.
    (defAround `id(f) = #fix (fun recur.
      (defAfter `id(f) = recur;
       `t(foldr a next
            (BExpression` fun `id(a). `t(next))
          foldr as next
            (BExpression` fun `id(as). `t(next))
          (BExpression` fun __. #callcc (fun return.
            `t(body) return (fun __. #crash)))))))
}

syntax blockContent:Block =
  (stmnts:Statement ";"?)* ret:Return?
{
  #scope (stmnts ret)
  BExpression` efun return. efun break. `t(
    foldr stmnts next
      (BExpression` `t(stmnts) return break; `t(next))
    foldr ret __
      (BExpression` `t(ret) return break)
    (BExpression` #unit))
}

syntax return:Return = "return" e:Expression? {
  BExpression` efun return. efun break. `t(
    foldr e __
      (BExpression` return (#deref `t(e)))
    (BExpression` return #unit))
}

syntax break:Return = "break" {
  BExpression` efun return. efun break. break #unit
}

syntax luaMatch:Statement =
  "match" e:Expression "with"
  arms:(p:Pattern ":" b:Block)+
  "end"
{
  #scope (e)
  #scope arms:(p b)
  BExpression` efun return. efun break.
    (defAfter e = #deref `t(e);
     `t(foldr arms next
          (Expression` match e with
            | `t(p) -> `t(b) return break
            | _ -> `t(next))
          (BExpression` #crash)))
}

// syntax ocamlInLua:Statement = e:OcamlExpression {
//   BExpression` efun return. efun break. `t(e)
// }
// syntax luaInOcaml:OcamlExpression = s:Statement {
//   BExpression` `t(s) (fun __. #crash) (fun __. #crash)
// }

// Becomes infinitely ambiguous, so to speak. Any Statement can be parsed
// through any number of ocamlInLua(luaInOcaml([...])) wrappers.

// syntax ocamlInLua:Expression = e:OcamlExpression {
//   e
// }
// syntax luaInOcaml:OcamlExpression = e:Expression {
//   e
// }

// also infinitely ambiguous, for the same reason.

// syntax ocamlInLua:Statement = e:OcamlExpression {
//   BExpression` efun return. efun break. `t(e)
// }
// syntax luaInOcaml:OcamlExpression = e:Expression {
//   e
// }

//match 4 with
//  | 1 -> print(1)
//  | a -> print(a)
// gives ambiguity in the form of (match [...] print)(a) or (match [...] print(a))

// print(1)
// gives ambiguity in the form of (print(1)) or (print)(1), since we can go
// through the *In* constructions or not.
// Precisely what trees are available as ambiguities I'm not sure, error
// is as follows:
// Ambiguity: 54:1-54:9
// Repr rep* [(sequence,54:1-54:9)] 54:1-54:9
// Repr rep* [(sequence,54:1-54:6),(sequence,54:6-54:9)] 54:1-54:9

// It allows writing expressions in statement position, so we can suddenly
// write a single identifier or an arithmetic expression "loose", so the above
// error is [Statement(FuncCall)] vs [Statement(Var), Statement(Paren(IntLit))]


// These are copied without any change from ocaml to simulate importing, except Expression switched for OcamlExpression, since the types would almost certainly be different in a real world situation

syntax match:OcamlExpression =
  "match" e:OcamlExpression "with"
  arm:("|" p:Pattern "->" body:OcamlExpression)+
{
  #scope arm:(p body)
  #scope (e)
  #prec 1
  BExpression` #callcc (fun end. (fun val.
    `t(foldr arm prev
         (BExpression`
           #callcc (fun next.
             (`t(p) next val;
              end `t(body)));
           `t(prev))
       (BExpression` #crash)))
    `t(e))
}


syntax intPat:Pattern = i:Integer {
  BExpression` efun fail. efun val.
    #if (#equal `int(i) val)
      (fun __. #unit)
      (fun __. fail #unit)
}
syntax floatPat:Pattern = f:Float {
  BExpression` efun fail. efun val.
    #if (#equal `float(f) val)
      (fun __. #unit)
      (fun __. fail #unit)
}
syntax stringPat:Pattern = s:String {
  BExpression` efun fail. efun val.
    #if (#equal `str(s) val)
      (fun __. #unit)
      (fun __. fail #unit)
}
syntax bindPat:Pattern = id:Identifier {
  #bind id after
  BExpression` efun __. efun val.
    defAfter `id(id) = val
}
syntax wildcardPat:Pattern = "__" {
  BExpression` efun __. efun __. #unit
}
syntax listPat:Pattern =
  "[" (p:Pattern (";" ps:Pattern)*)? "]"
{
  BExpression` efun fail. efun val.
    `t(foldr p next
         (BExpression` efun prev.
           (#if (#equal prev #nil)
              (fun __. fail #unit)
              (fun __. #unit);
            `t(p) fail (#head prev);
            `t(next) (#tail prev)))
       foldr ps next
         (BExpression` efun prev.
           (#if (#equal prev #nil)
              (fun __. fail #unit)
              (fun __. #unit);
            `t(ps) fail (#head prev);
            `t(next) (#tail prev)))
       (BExpression` (efun prev.
         #if (#equal prev #nil)
           (fun __. #unit)
           (fun __. fail #unit))))
    val
}
syntax consPat:Pattern = h:Pattern "::" t:Pattern {
  #assoc right
  #prec 10
  BExpression` efun fail. efun value.
    (#if (#equal value #nil)
       (fun __. fail #unit)
       (fun __. #unit);
     defAfter headValue = #head value;
     `t(h) fail headValue;
     defAfter tailValue = #tail value;
     `t(t) fail tailValue)
}